# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
analyzer:
  errors:
    unintended_html_in_doc_comment: ignore
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
   # Add these lines to ensure const checks are active:
    - prefer_const_constructors
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables

    # Performance & Resources
    - use_key_in_widget_constructors
    - avoid_unnecessary_containers
    - prefer_final_fields
    - prefer_final_locals

    # Flutter Practices
    - sized_box_for_whitespace
    - use_build_context_synchronously
    - no_logic_in_create_state

    # General / Clarity
    - prefer_is_empty
    - prefer_is_not_empty
    - use_super_parameters
    - prefer_single_quotes
    - avoid_print
    - avoid_relative_lib_imports

# Add or modify this section for formatting
formatter:

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
